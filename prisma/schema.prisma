datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  orders          Order[]
  organisedEvents Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ----------- EVENT
model Event {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  location      String?
  createdAt     DateTime @default(now())
  imageUrl      String
  startDateTime DateTime @default(now())
  endDateTime   DateTime @default(now())
  fees          String?
  isFree        Boolean  @default(true)
  url           String?

  // Relations
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  organiser   User?   @relation(fields: [organiserId], references: [id])
  organiserId String? @db.ObjectId

  orders Order[]

  @@index([categoryId], map: "category_index")
  @@index([organiserId], map: "organiser_index")
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // Relations
  events Event[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  stripeId    String   @unique
  totalAmount String?

  // Relations
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String? @db.ObjectId

  buyer   User?   @relation(fields: [buyerId], references: [id])
  buyerId String? @db.ObjectId

  @@index([eventId], map: "event_index")
  @@index([buyerId], map: "buyer_index")
}
